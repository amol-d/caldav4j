#summary Frequently Asked Questions
#labels faq

= Introduction =

Please, please, please: if you have troubles, check this page carefully and remember:
 * caldav4j is tested against Bedework 3.4.1.1

tests ok against: bedework 3.5, davical (svn)

almost working with: darwin calendar server (apple)

issues with: Cosmo

 * caldav4j requires Java 1.6
 * caldav4j requires the jakarta-slide jar provided on this site
 * before submitting issues on list please, run junits


= FAQ =

== FAQ 1 ==
 
Q: Can't compile caldav4j 

A: build without test 
# mvn package -Dmaven.test.skip=true

== FAQ 2 ==
Q: Caldav4j won't work with my caldav server

A: Run junit tests against your caldav server. At least some tests (eg. list events) should work. Caldav4j test creates and queries for events in a given user caldav path.
ex. the following configuration

"http://calendar.example.com/ucaldav/user/rpolli/"

user: rpolli

password: mypasswd

calendar: "collection/"

 * login to http://rpolli:mypasswd@calendar.example.com/ucaldav/user/rpolli/
 * create the calendar "collection/" in the above path
 * creates, deletes, searches calendars into  http://rpolli:mypasswd@calendar.example.com/ucaldav/user/rpolli/collection/


== FAQ 2 ==
Q: I got some strange XML error/exception while running caldav4j

A: use java 1.6

== FAQ 3 ==
Q: caldav4j passes the test but won't work on my application

A: check your environment: java version, httpclient version, slide version. To avoid issues, use maven in your project. *You need to use the slide provided by this site: it's patched to run with httpclient-3.0 and httpclient-3.1*

== FAQ 4 ==
Q: how can I query for events like...

A: see the CreateCaldavQuery page. As of now caldav/webdav protocol doesn't support disjuntive search (eg. something like all events where SUMMARY=A OR SUMMARY=B )

== FAQ 5 ==
Q: how to submit new code?

A: as caldav4j needs to be reliable, we'd like to have each class tested. So contributors need to write a test case (or a test class if it's not present) and then write the patch.
The test class ensures the patch won't change the old behavior.
*It's important not to refactor code when submitting patches, so that we can apply it easily an quickly*